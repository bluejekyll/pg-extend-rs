initSidebarItems({"fn":[["get_args","Returns an iterator of argument Datums"],["register_panic_handler","This will replace the current panic_handler"]],"macro":[["debug","Log a `DEBUG1` level message. These are hidden by default"],["error","Log at `ERROR` level and abort the current query and transaction. Beware! The PostgreSQL implementation uses exception handling with `longjmp`, which currently has unsafe side-effects."],["fatal","Log a `FATAL` error and exit the current backend process, also closing the database connection."],["info","Log an `INFO` message. Used for information specifically requested by user (eg VACUUM VERBOSE output). These messages are always sent to the client regardless of `client_min_messages` setting, and not to server logs by default."],["log","Logs a `LOG` message. These messages have a high precedence for writing to PostgreSQL server logs but low precedence for sending to the client."],["notice","Log at `NOTICE` level. Use for helpful messages to users about query operation; expected messages like implicit sequence creation by SERIAL."],["pg_create_stmt_bin","auto generate function to output a SQL create statement for the function"],["pg_log","Generic logging macro. See the [`Level` enum] for all available log levels."],["pg_magic","A macro for marking a library compatible with the Postgres extension framework."],["pgbool","A macro to convert booleans between Postgres and Rust"],["trace","Log a `DEBUG5` level message. This macro is included for easy replacement with Rust \"log\" crate macros."],["warn","Log at `WARNING` level. Use for messages that are unexpected for the user."]],"mod":[["log","Implements macros for the PostgreSQL logging system."],["native","Module for native Postgres types."],["pg_alloc","A Postgres Allocator"],["pg_bool","Support for Postgres boolean values"],["pg_datum","Postgres Datum conversions for Rust types"],["pg_error","Error reporting support for Postgres. This module is deprecated, use the logging macros in the [`pg_extend::log` module]."],["pg_sys","All exported C FFI symbols from Postgres"],["pg_type","Postgres type definitions"]]});