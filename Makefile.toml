# Copyright 2015-2019 Benjamin Fry <benjaminfry@me.com>
#
# Licensed under the Apache License, Version 2.0, <LICENSE-APACHE or
# http://apache.org/licenses/LICENSE-2.0> or the MIT license <LICENSE-MIT or
# http://opensource.org/licenses/MIT>, at your option. This file may not be
# copied, modified, or distributed except according to those terms.

# This is a Makefile for `cargo make`, to use it first install cargo-make with `cargo install cargo-make`

[config]
skip_core_tasks = true

[config.modify_core_tasks]
# if true, all core tasks are set to private (default false)
private = true

## General environment configuration
[env]
TARGET_DIR = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target"
CARGO_MAKE_WORKSPACE_TARGET_DIRECTORY = "${TARGET_DIR}"
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = "true"
CARGO_MAKE_KCOV_INSTALLATION_DIRECTORY = "${TARGET_DIR}/kcov"
CARGO_MAKE_KCOV_DOWNLOAD_DIRECTORY = "${TARGET_DIR}/kcov-dl"
CARGO_MAKE_KCOV_VERSION = "37"

# This should match the 12.1 settings
PG_VERSION = "12.1"
PG_PORT = "5444"

PG_DIR = "${TARGET_DIR}/postgres"
PG_DL_DIR = "${PG_DIR}"
PG_BUILD_DIR = "${PG_DIR}/postgres_build_${PG_VERSION}"
PG_INSTALL_DIR = "${PG_DIR}/postgres_${PG_VERSION}"
PG_BIN_DIR = "${PG_INSTALL_DIR}/bin"
PG_DB_DIR = "${TARGET_DIR}/postgres_db_${PG_VERSION}"
POSTGRES_TEST_DB = "pg_extend_rs_test_db"
PG_LOGPATH = "${TARGET_DIR}/postgres-${PG_VERSION}.log"

PATH = "${PG_BIN_DIR}:${PATH}"

[env.v10]
PG_VERSION = "10.11"
PG_PORT = "5442" # port is incremented by the major version, 5432 + ${PG_VERSION}

PG_DIR = "${TARGET_DIR}/postgres"
PG_DL_DIR = "${PG_DIR}"
PG_BUILD_DIR = "${PG_DIR}/postgres_build_${PG_VERSION}"
PG_INSTALL_DIR = "${PG_DIR}/postgres_${PG_VERSION}"
PG_BIN_DIR = "${PG_INSTALL_DIR}/bin"
PG_DB_DIR = "${TARGET_DIR}/postgres_db_${PG_VERSION}"
POSTGRES_TEST_DB = "pg_extend_rs_test_db"
PG_LOGPATH = "${TARGET_DIR}/postgres-${PG_VERSION}.log"

PATH = "${PG_BIN_DIR}:${PATH}"

[env.v11]
PG_VERSION = "11.6"
PG_PORT = "5443" # port is incremented by the major version, 5432 + ${PG_VERSION}

PG_DIR = "${TARGET_DIR}/postgres"
PG_DL_DIR = "${PG_DIR}"
PG_BUILD_DIR = "${PG_DIR}/postgres_build_${PG_VERSION}"
PG_INSTALL_DIR = "${PG_DIR}/postgres_${PG_VERSION}"
PG_BIN_DIR = "${PG_INSTALL_DIR}/bin"
PG_DB_DIR = "${TARGET_DIR}/postgres_db_${PG_VERSION}"
POSTGRES_TEST_DB = "pg_extend_rs_test_db"
PG_LOGPATH = "${TARGET_DIR}/postgres-${PG_VERSION}.log"

PATH = "${PG_BIN_DIR}:${PATH}"

[env.v12]
PG_VERSION = "12.1"
PG_PORT = "5444" # port is incremented by the major version, 5432 + ${PG_VERSION}

PG_DIR = "${TARGET_DIR}/postgres"
PG_DL_DIR = "${PG_DIR}"
PG_BUILD_DIR = "${PG_DIR}/postgres_build_${PG_VERSION}"
PG_INSTALL_DIR = "${PG_DIR}/postgres_${PG_VERSION}"
PG_BIN_DIR = "${PG_INSTALL_DIR}/bin"
PG_DB_DIR = "${TARGET_DIR}/postgres_db_${PG_VERSION}"
POSTGRES_TEST_DB = "pg_extend_rs_test_db"
PG_LOGPATH = "${TARGET_DIR}/postgres-${PG_VERSION}.log"

PATH = "${PG_BIN_DIR}:${PATH}"

##
## Installation tasks
##

[tasks.install-openssl]
description = "Installs OpenSSL on Windows"
env = { OPENSSL_VERSION = "1_1_1d", OPENSSL_DIR = "${CARGO_MAKE_WORKING_DIRECTORY}\\target\\OpenSSL" }
condition = { platforms = ["windows"], files_not_exist = ["${OPENSSL_DIR}"] }
script_runner = "powershell"
script_extension = "ps1"
script = [
'''
mkdir ${env:CARGO_MAKE_WORKING_DIRECTORY}\\target
mkdir ${env:CARGO_MAKE_WORKING_DIRECTORY}\\target\OpenSSL
Invoke-WebRequest -URI "http://slproweb.com/download/Win64OpenSSL-${env:OPENSSL_VERSION}.exe" -OutFile "${env:CARGO_MAKE_WORKING_DIRECTORY}\target\OpenSSL.exe"
Start-Process -FilePath "${env:CARGO_MAKE_WORKING_DIRECTORY}\target\OpenSSL.exe" -ArgumentList "/SILENT /VERYSILENT /SP- /DIR=${env:OPENSSL_DIR}"
Invoke-WebRequest "https://curl.haxx.se/ca/cacert.pem" -O "${env:OPENSSL_DIR}\cacert.pem"
'''
]

[tasks.install-postgres]
workspace = false
description = "Installs Postgres"
windows_alias = "empty"
script_runner = "@shell"
script = [
'''
set -e

if ${PG_BIN_DIR}/postgres --version ; then exit 0 ; fi

echo "Installing Postgres ${PG_VERSION:?} into ${PG_INSTALL_DIR:?}"

# download
PG_DL_PATH="${PG_DL_DIR:?}/postgres_${PG_VERSION}.tar.bz2"
PG_URL=https://ftp.postgresql.org/pub/source/v${PG_VERSION:?}/postgresql-${PG_VERSION:?}.tar.bz2

if ! [ -f "${PG_DL_PATH:?}" ]; then
    echo "Retrieving ${PG_URL:?}"
    mkdir -p ${PG_DL_DIR:?}
    curl -s -o ${PG_DL_PATH:?} ${PG_URL:?}
fi

# build
echo "Building ${PG_BUILD_DIR:?}"
mkdir -p ${PG_BUILD_DIR:?}

current_dir=${PWD}
cd ${PG_BUILD_DIR:?}

bunzip2 -k -d -f ${PG_DL_PATH:?}
PG_TAR_PATH="${PG_DL_DIR}/postgres_${PG_VERSION}.tar"
tar -xf ${PG_TAR_PATH:?}

cd postgresql-${PG_VERSION}
./configure --prefix=${PG_INSTALL_DIR} --with-pgport=${PG_PORT} --enable-cassert --without-readline
make install

cd ${current_dir:?}
${PG_BIN_DIR}/postgres --version

rm -r ${PG_BUILD_DIR:?}
rm ${PG_TAR_PATH:?}
rm ${PG_DL_PATH:?}
'''
]

[tasks.install-audit]
description = "Installs cargo-audit"
workspace = false
condition_script = ["if cargo audit --version ; then exit 1 ; else exit 0 ; fi"]
command = "cargo"
args = ["install", "cargo-audit"]

[tasks.install-with]
description = "Installs cargo-with"
workspace = false
condition_script = ["if cargo with --version ; then exit 1 ; else exit 0 ; fi"]
command = "cargo"
args = ["install", "cargo-with", "--git=https://github.com/bluejekyll/cargo-with.git", "--branch=master"]

[tasks.install-kcov]
description = "Installs the kcov coverage tool"
workspace = false
script_runner = "bash"
install_script = [
'''
KCOV_INSTALLATION_DIRECTORY=""
KCOV_BINARY_DIRECTORY=""
if [ -n "${CARGO_MAKE_KCOV_INSTALLATION_DIRECTORY}" ]; then
    mkdir -p ${CARGO_MAKE_KCOV_INSTALLATION_DIRECTORY}
    cd ${CARGO_MAKE_KCOV_INSTALLATION_DIRECTORY}
    KCOV_INSTALLATION_DIRECTORY="$(pwd)/"
    cd -
    echo "Kcov Installation Directory: ${KCOV_INSTALLATION_DIRECTORY}"
    KCOV_BINARY_DIRECTORY="${KCOV_INSTALLATION_DIRECTORY}/build/src/"
    echo "Kcov Binary Directory: ${KCOV_BINARY_DIRECTORY}"
fi

if ${KCOV_BINARY_DIRECTORY}kcov --version ; then exit 0 ; fi

# get help info to fetch all supported command line arguments
KCOV_HELP_INFO=`${KCOV_BINARY_DIRECTORY}kcov --help` || true

# check needed arguments are supported, else install
if [[ $KCOV_HELP_INFO != *"--include-pattern"* ]] || [[ $KCOV_HELP_INFO != *"--exclude-line"* ]] || [[ $KCOV_HELP_INFO != *"--exclude-region"* ]]; then
    # check we are on a supported platform
    if [ "$(uname)" == "Linux" ]; then
        if [ "$(grep -Ei 'debian|buntu|mint' /etc/*release)" ]; then
            echo "Installing/Upgrading kcov..."
            sudo apt-get update || true
            sudo apt-get install -y libcurl4-openssl-dev libelf-dev libdw-dev cmake gcc binutils-dev
        fi
    elif [ "$(uname)" == "Darwin" ]; then
        for brew_install in zlib bash cmake pkgconfig wget ; do
            if brew info ${brew_install} | grep "Not installed" ; then
                brew install ${brew_install}
            else 
                echo "skipping ${brew_install} already installed"
            fi
        done
    fi

    mkdir -p ${CARGO_MAKE_KCOV_DOWNLOAD_DIRECTORY}
    cd ${CARGO_MAKE_KCOV_DOWNLOAD_DIRECTORY}
    KCOV_DOWNLOAD_DIRECTORY=$(pwd)

    rm -rf kcov-${CARGO_MAKE_KCOV_VERSION:?}
    rm -f v${CARGO_MAKE_KCOV_VERSION}.zip

    wget https://github.com/SimonKagstrom/kcov/archive/v${CARGO_MAKE_KCOV_VERSION}.zip
    unzip v${CARGO_MAKE_KCOV_VERSION}.zip
    cd kcov-${CARGO_MAKE_KCOV_VERSION}
    mkdir -p build
    cd ./build
    cmake ..
    make

    # if custom installation directory, leave kcov as local
    if [ -n "${CARGO_MAKE_KCOV_INSTALLATION_DIRECTORY}" ]; then
        cd ${KCOV_DOWNLOAD_DIRECTORY}/kcov-${CARGO_MAKE_KCOV_VERSION}
        mv ./* ${KCOV_INSTALLATION_DIRECTORY}
    else
        sudo make install
        cd ../..
        rm -rf kcov-${CARGO_MAKE_KCOV_VERSION}
    fi
fi
'''
]

##
## Postgres operations

[tasks.pg-init-db-dir]
description = "Creates the test DB used by the integration tests"
workspace = false
condition = { files_not_exist = ["${PG_DB_DIR}"] }
dependencies = ["install-postgres"]
script_runner = "@shell"
script = [
'''
set -e

echo "Intializing postgres db ${PG_DB_DIR:?}"
mkdir -p ${PG_DB_DIR:?}
${PG_BIN_DIR}/pg_ctl init -D ${PG_DB_DIR:?} -l ${PG_LOGPATH}
'''
]

[tasks.pg-start]
description = "Starts Postgres"
workspace = false
dependencies = ["pg-init-db-dir"]
script_runner = "@shell"
script = [
'''
set -e

if ${PG_BIN_DIR}/pg_isready -p ${PG_PORT} ; then exit 0 ; fi

echo "Starting postgres ${PG_DB_DIR:?}"
mkdir -p ${PG_DB_DIR:?}
${PG_BIN_DIR}/pg_ctl restart -D ${PG_DB_DIR:?} -l ${PG_LOGPATH} -o "-p ${PG_PORT:?}"
${PG_BIN_DIR}/pg_isready -p ${PG_PORT} -t 5
'''
]

[tasks.pg-create-db]
description = "Creates the test DB used by the integration tests"
workspace = false
dependencies = ["pg-start"]
script_runner = "@shell"
script = [
'''
set -e

echo "Creating DB ${POSTGRES_TEST_DB:?}"
${PG_BIN_DIR}/psql postgres -p ${PG_PORT} -o /dev/null -c "SELECT 1" # check the connection works
${PG_BIN_DIR}/psql postgres -p ${PG_PORT} -c "CREATE DATABASE ${POSTGRES_TEST_DB:?};" || true
'''
]

[tasks.pg-drop-db]
description = "Creates the test DB used by the integration tests"
workspace = false
dependencies = ["pg-start"]
script_runner = "@shell"
script = [
'''
set -e

echo "Dropping DB ${POSTGRES_TEST_DB:?}"
${PG_BIN_DIR}/psql postgres -p ${PG_PORT} -o /dev/null -c "SELECT 1" # check the connection works
${PG_BIN_DIR}/psql postgres -p ${PG_PORT} -c "DROP DATABASE ${POSTGRES_TEST_DB:?};" || true
'''
]

[tasks.pg-stop]
description = "Starts Postgres"
workspace = false
dependencies = ["pg-init-db-dir"]
script_runner = "@shell"
script = [
'''
set -e

echo "Stopping postgres ${PG_DB_DIR:?}"
${PG_BIN_DIR}/pg_ctl stop -D ${PG_DB_DIR:?} -l ${PG_LOGPATH} -o "-p ${PG_PORT:?}" || true
'''
]

[tasks.psql]
description = "Connects psql to"
dependencies = ["pg-create-db"]
workspace = false
script_runner = "@shell"
script = [
'''
set -e

echo "Connection to postgres ${PG_DB_DIR:?} ${POSTGRES_TEST_DB:?}"
${PG_BIN_DIR}/psql ${POSTGRES_TEST_DB:?} -p ${PG_PORT}
'''
]

##
## Standard tasks for testing, building, etc.
##

# TODO: actually make this await rather than sleep
[tasks.await-update]
description = "awaits the package to show up in crates.io"
script_runner = "@shell"
script = [
'''
sleep 10
'''
]

[tasks.clean-kcov]
description = "Remove the kcov installation"
workspace = false
script_runner = "@shell"
script = [
'''
rm -rf ${CARGO_MAKE_KCOV_INSTALLATION_DIRECTORY:?}
'''
]

[tasks.clean]
description = "Remove only the current workspace member"
command = "cargo"
args = ["clean", "-p", "${CARGO_MAKE_CRATE_NAME}"]

[tasks.clean-build]
description = "Remove only the current workspace member"
workspace = false
script_runner = "@shell"
script = [
'''
rm -rf ${TARGET_DIR:?}/debug
'''
]

[tasks.clean-all]
description = "Remove only the current workspace member"
workspace = false
script_runner = "@shell"
script = [
'''
rm -rf ${TARGET_DIR:?}
rm -rf target
'''
]

[tasks.update]
description = "Update dependencies"
command = "cargo"
args = ["update", "-p", "${CARGO_MAKE_CRATE_NAME}"]

[tasks.fmt]
description = "Check formatting with rustfmt"
command = "cargo"
args = ["fmt", "--", "--check"]

[tasks.check]
description = "Run a quick check on all the crates"
dependencies = ["install-postgres"]
command = "cargo"
args = ["check", "--lib", "--examples", "--tests", "--bins", "@@remove-empty(FEATURES)"]

[tasks.build]
description = "Build all the crates"
dependencies = ["install-postgres"]
command = "cargo"
args = ["build", "--lib", "--bins",  "@@remove-empty(FEATURES)"]

[tasks.test]
description = "Run tests all the crates"
dependencies = ["pg-create-db"]
env = { POSTGRES_PORT = "${PG_PORT}" }
command = "cargo"
args = ["test", "--jobs=1", "--lib", "--examples", "--tests", "--bins", "@@remove-empty(FEATURES)"]

[tasks.clippy]
description = "Run the clippy linter on all crates"
dependencies = ["clean", "install-postgres"]
command = "cargo"
args = ["clippy", "--lib", "--examples", "--tests", "--bins", "--all-features", "--", "-D", "warnings"]

[tasks.build-bench]
description = "Check that all benchmarks compile"
dependencies = ["clean", "install-postgres"]
command = "cargo"
toolchain = "nightly"
args = ["bench", "--no-run"]

[tasks.audit]
description = "Run cargo audit on all crates"
workspace = false
dependencies = ["check", "install-audit"]
command = "cargo"
args = ["audit", "--deny-warnings", "--ignore=RUSTSEC-2019-0031"]

[tasks.all]
description = "Run check, build, and test on all crates"
dependencies = ["check", "build", "test"]

[tasks.default]
description = "Run the all task"
run_task = "all"

##
## All feature testing builds
##

[tasks.default-features]
description = "Run all with default features"
dependencies = ["install-openssl"]
workspace = false
env = { FEATURES = "" }
run_task = { name = "all", fork = true }

[tasks.no-default-features]
description = "Run all with --no-default-features"
dependencies = ["install-openssl"]
workspace = false
env = { FEATURES = "--no-default-features" }
run_task = { name = "all", fork = true }

[tasks.all-features]
description = "Run all with --all-features"
dependencies = ["install-openssl"]
workspace = false
# can't currently test --all-features on pg-extend because it would enable all versions, which won't compile
env = { FEATURES = "--all-features", CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = "pg-extend" }
run_task = { name = "all", fork = true }

##
## Coverage
##

[tasks.coverage-kcov]
description = "Installs (if missing) and runs coverage using kcov (not supported on windows)"
windows_alias = "empty"
mac_alias = "empty" # TODO: mac works, but is so slow it hangs on some tests...
dependencies = ["install-with", "install-kcov"]
script_runner = "bash"
env = { CARGO_MAKE_KCOV_INCLUDE_PATTERN = "${CARGO_MAKE_WORKING_DIRECTORY}/src/", CARGO_MAKE_COVERAGE_REPORT_DIRECTORY = "${TARGET_DIR}/coverage", CARGO_MAKE_WITH_KCOV_ARGS = "${TDNS_WITH_KCOV_ARGS}" }
script = [
'''
set -e

echo "Working Directory: ${CARGO_MAKE_WORKING_DIRECTORY}"

KCOV_BINARY_DIRECTORY=""
if [ -n "${CARGO_MAKE_KCOV_INSTALLATION_DIRECTORY}" ]; then
    cd ${CARGO_MAKE_KCOV_INSTALLATION_DIRECTORY}
    KCOV_INSTALLATION_DIRECTORY="$(pwd)/"
    cd -
    echo "Kcov Installation Directory: ${KCOV_INSTALLATION_DIRECTORY}"
    KCOV_BINARY_DIRECTORY="${KCOV_INSTALLATION_DIRECTORY}/build/src/"
    echo "Kcov Binary Directory: ${KCOV_BINARY_DIRECTORY}"
fi

TARGET_DIRECTORY="target/coverage/${CARGO_MAKE_CRATE_FS_NAME}"
if [ -n "$CARGO_MAKE_COVERAGE_REPORT_DIRECTORY" ]; then
    TARGET_DIRECTORY="$CARGO_MAKE_COVERAGE_REPORT_DIRECTORY/${CARGO_MAKE_CRATE_FS_NAME}"
    mkdir -p ${TARGET_DIRECTORY}
else
    mkdir -p ${TARGET_DIRECTORY}
fi

BINARY_DIRECTORY=target/debug
if [ -n "$CARGO_MAKE_WORKSPACE_TARGET_DIRECTORY" ]; then
    BINARY_DIRECTORY="${CARGO_MAKE_WORKSPACE_TARGET_DIRECTORY}/debug"
fi

KCOV_EXCLUDE_LINE_ARG=""
if [ -n "$CARGO_MAKE_KCOV_EXCLUDE_LINE" ]; then
    KCOV_EXCLUDE_LINE_ARG="--exclude-line=${CARGO_MAKE_KCOV_EXCLUDE_LINE}"
fi

KCOV_EXCLUDE_REGION_ARG=""
if [ -n "$CARGO_MAKE_KCOV_EXCLUDE_REGION" ]; then
    KCOV_EXCLUDE_REGION_ARG="--exclude-region=${CARGO_MAKE_KCOV_EXCLUDE_REGION}"
fi

cd ${CARGO_MAKE_WORKING_DIRECTORY}
echo "Working director: ${PWD}"
echo "Running tests from directory: ${BINARY_DIRECTORY}"

# Evaluate variables that may be in the expression
# This allows us to do double expansion on a non-variable second expansion
CARGO_MAKE_TEST_COVERAGE_BINARY_FILTER_REGEX="$(sh -c "echo \"${CARGO_MAKE_TEST_COVERAGE_BINARY_FILTER}\"")"
echo "Test binary filter regex: ${CARGO_MAKE_TEST_COVERAGE_BINARY_FILTER_REGEX}"

## Setup the env for the kcov script
KCOV=${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY:?}/scripts/kcov.sh

export KCOV_BINARY=${KCOV_BINARY_DIRECTORY:?}/kcov
export KCOV_TARGET_DIRECTORY=${TARGET_DIRECTORY:?}
export KCOV_INCLUDE_PATTERN=${CARGO_MAKE_KCOV_INCLUDE_PATTERN:?}
export KCOV_EXCLUDE_LINE_ARG
export KCOV_EXCLUDE_REGION_ARG

echo "Running coverage for ${CARGO_MAKE_CRATE_FS_NAME} ${CARGO_MAKE_WITH_KCOV_ARGS} ${FEATURES}"
cargo with "${KCOV:?} {bin} {args}" -- test ${CARGO_MAKE_WITH_KCOV_ARGS} ${FEATURES} || true
'''
]

[tasks.coverage]
description = "Run coverage reports on all crates"
run_task = "coverage-kcov"

##
## publishing
##

[tasks.package]
description = "package artifacts for each crate"
command = "cargo"
args = ["package", "--locked"]

[tasks.inner_publish]
description = "publish next release"
dependencies = ["await-update", "update", "check", "package"]
private = true
command = "cargo"
args = ["publish", "--verbose", "--locked"]

[tasks.publish]
description = "publish next release"
workspace = false
env = { CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = "integration-tests/*;examples/*"}
run_task = { name = "inner_publish", fork = true }